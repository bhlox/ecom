// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: products.sql

package db

import (
	"context"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (name,description,image,price,quantity)
VALUES ($1,$2,$3,$4,$5)
RETURNING id, name, description, image, price, quantity, created_at
`

type CreateProductParams struct {
	Name        string
	Description string
	Image       string
	Price       string
	Quantity    int32
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createProduct,
		arg.Name,
		arg.Description,
		arg.Image,
		arg.Price,
		arg.Quantity,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Image,
		&i.Price,
		&i.Quantity,
		&i.CreatedAt,
	)
	return i, err
}

const getAllProducts = `-- name: GetAllProducts :many
SELECT id, name, description, image, price, quantity, created_at FROM products
`

func (q *Queries) GetAllProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getAllProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Image,
			&i.Price,
			&i.Quantity,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProduct = `-- name: GetProduct :one
SELECT id, name, description, image, price, quantity, created_at FROM products
WHERE id = $1
`

func (q *Queries) GetProduct(ctx context.Context, id int32) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Image,
		&i.Price,
		&i.Quantity,
		&i.CreatedAt,
	)
	return i, err
}

const getProductPriceAndStock = `-- name: GetProductPriceAndStock :one
SELECT price,quantity FROM products
WHERE id = $1
`

type GetProductPriceAndStockRow struct {
	Price    string
	Quantity int32
}

func (q *Queries) GetProductPriceAndStock(ctx context.Context, id int32) (GetProductPriceAndStockRow, error) {
	row := q.db.QueryRowContext(ctx, getProductPriceAndStock, id)
	var i GetProductPriceAndStockRow
	err := row.Scan(&i.Price, &i.Quantity)
	return i, err
}

const updateProductStock = `-- name: UpdateProductStock :exec
UPDATE products 
SET quantity = $1
WHERE id = $2
`

type UpdateProductStockParams struct {
	Quantity int32
	ID       int32
}

func (q *Queries) UpdateProductStock(ctx context.Context, arg UpdateProductStockParams) error {
	_, err := q.db.ExecContext(ctx, updateProductStock, arg.Quantity, arg.ID)
	return err
}
